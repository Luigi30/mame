// license:BSD-3-Clause
// copyright-holders:Katherine Rohl

// For now, pretend to be a Type I keyboard.

#include "emu.h"
#include "apollo_kbd_new.h"

#define LOG_GENERAL 0x01
#define LOG_SETUP   0x02

#define VERBOSE (LOG_SETUP | LOG_GENERAL)

#include "logmacro.h"

#define LOG(...)      LOGMASKED(LOG_GENERAL, __VA_ARGS__)
#define LOGSETUP(...) LOGMASKED(LOG_SETUP,   __VA_ARGS__)

#ifdef _MSC_VER
#define FUNCNAME __func__
#else
#define FUNCNAME __PRETTY_FUNCTION__
#endif

#define MAP_APOLLO_KEYS 1

apollo_keyboard_new_device::apollo_keyboard_new_device(const machine_config& mconfig, const char* tag, device_t* owner, uint32_t clock)
	: serial_keyboard_device(mconfig, APOLLO_KEYBOARD_NEW, tag, owner, 0)
	, m_keys_down(0U)
	, m_last_reset(0U)
{
}

void apollo_keyboard_new_device::write(uint8_t data)
{
	logerror("KB: received character %02x\n",data);

    // TODO: convert from old KB device
}

namespace {
u16 const TRANSLATION_TABLE_MODEL_I[][4][16] = {
	{   // plain
		{ '`',   '1',   '2',   '3',   '4',   '5',   '6',   '7',   '8',   '9',   '0',   '-',   '=',   0x08U, 0x7fU, 0x1bU },
		{ 0x09U, 'q',   'w',   'e',   'r',   't',   'y',   'u',   'i',   'o',   'p',   '[',   ']',   '\\',  0xffU, 0xffU },
		{ 0xffU, 'a',   's',   'd',   'f',   'g',   'h',   'j',   'k',   'l',   ';',   '\'',  0x0dU, 0xc5U, 0xc4U, 0x0aU },
		{ 0xffU, '\\',  'z',   'x',   'c',   'v',   'b',   'n',   'm',   ',',   '.',   '/',   0xffU, 0xc6U, 0xc7U, ' '   }
	},
	{   // SHIFT
		{ '~',   '!',   '@',   '#',   '$',   '%',   '^',   '&',   '*',   '(',   ')',   '_',   '+',   0x08U, 0x7fU, 0x1bU },
		{ 0x09U, 'Q',   'W',   'E',   'R',   'T',   'Y',   'U',   'I',   'O',   'P',   '{',   '}',   '|',   0xffU, 0xffU },
		{ 0xffU, 'A',   'S',   'D',   'F',   'G',   'H',   'J',   'K',   'L',   ':',   '"',   0x0dU, 0xffU, 0xffU, 0x0aU },
		{ 0xffU, '_',   'Z',   'X',   'C',   'V',   'B',   'N',   'M',   '<',   '>',   '?',   0xffU, 0xffU, 0xffU, ' '   }
	},
	{   // CODE -- partial
		{ 0xffU, '1',   '2',   '3',   '4',   '5',   '6',   '7',   '8',   '9',   '0',   0xffU, 0xffU, 0x88U, 0xffU, 0x9bU },
		{ 0x89U, 0xf1U, 0xf7U, 0xe5U, 0xf2U, 0xf4U, 0xf9U, 0xf5U, 0xe9U, 0xefU, 0xf0U, 0x9bU, 0xffU, 0xffU, 0xffU, 0xffU },
		{ 0xffU, 0xe1U, 0xf3U, 0xe4U, 0xe6U, 0xe7U, 0xe8U, 0xeaU, 0xebU, 0xecU, ';',   '\'',  0x8dU, 0xffU, 0xffU, 0xffU },
		{ 0xffU, 0x1cU, 0xfaU, 0xf8U, 0xe3U, 0xf6U, 0xe2U, 0xeeU, 0xedU, ',',   '.',   0xbfU, 0xffU, 0xd4U, 0xd5U, 0xffU }
	},
	{   // CTRL
		{ 0x00U, '1',   '2',   '3',   '4',   '5',   '6',   '7',   '8',   '9',   '0',   0x1fU, 0x1eU, 0x88U, 0x7fU, 0x1bU },
		{ 0x89U, 0x11U, 0x17U, 0x05U, 0x12U, 0x14U, 0x19U, 0x15U, 0x09U, 0x0fU, 0x10U, 0x9bU, 0x1dU, 0x1cU, 0xffU, 0xffU },
		{ 0xffU, 0x01U, 0x13U, 0x04U, 0x06U, 0x07U, 0x08U, 0x0aU, 0x0bU, 0x0cU, ';',   '\'',  0x8dU, 0xffU, 0xffU, 0x0aU },
		{ 0xffU, 0x1cU, 0x1aU, 0x18U, 0x03U, 0x16U, 0x02U, 0x0eU, 0x0dU, ',',   '.',   0xbfU, 0xffU, 0xffU, 0xffU, 0x00U }
	},
	{   // CODE-CTRL
		{ 0x00U, 0x91U, 0x92U, 0x93U, 0x94U, 0x95U, 0x96U, 0x97U, 0x98U, 0x99U, 0x90U, 0xBDU, 0x9DU, 0x88U, 0x7fU, 0x9bU },
		{ 0x89U, 0x91U, 0x97U, 0x85U, 0x92U, 0x94U, 0x99U, 0x95U, 0x89U, 0x8fU, 0x90U, 0xffU, 0xffU, 0xffU, 0xffU, 0xffU },
		{ 0xffU, 0x81U, 0x93U, 0x84U, 0x86U, 0x87U, 0x88U, 0x8aU, 0x8bU, 0x8cU, 0x1EU, 0x00U, 0x8dU, 0xffU, 0xffU, 0x0aU },
		{ 0xffU, 0x9cU, 0x9aU, 0x98U, 0x83U, 0x96U, 0x82U, 0x8eU, 0x8dU, 0x1bU, 0x1DU, 0xbfU, 0xffU, 0xffU, 0xffU, 0x00U }
	},
};


bool const CAPS_TABLE[4][16] = {
	{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false },
	{ false, true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  false, false, false, false, false },
	{ false, true,  true,  true,  true,  true,  true,  true,  true,  true,  false, false, false, false, false, false },
	{ false, false, true,  true,  true,  true,  true,  true,  true,  false, false, false, false, false, false, false }
};

} // anonymous namespace


static INPUT_PORTS_START( apollo_keyboard_new_device )
    PORT_INCLUDE(generic_keyboard)

	PORT_RS232_BAUD("RS232_TXBAUD", RS232_BAUD_1200, "TX Baud", apollo_keyboard_new_device, update_serial)
	PORT_RS232_DATABITS("RS232_DATABITS", RS232_DATABITS_8, "Data Bits", apollo_keyboard_new_device, update_serial)
	PORT_RS232_PARITY("RS232_PARITY", RS232_PARITY_NONE, "Parity", apollo_keyboard_new_device, update_serial)
	PORT_RS232_STOPBITS("RS232_STOPBITS", RS232_STOPBITS_1, "Stop Bits", apollo_keyboard_new_device, update_serial)
INPUT_PORTS_END


ioport_constructor apollo_keyboard_new_device::device_input_ports() const
{
	return INPUT_PORTS_NAME(apollo_keyboard_new_device);
}

void apollo_keyboard_new_device::device_start()
{
	serial_keyboard_device::device_start();

	save_item(NAME(m_keys_down));
	save_item(NAME(m_last_reset));

	set_rcv_rate(1200);
}

void apollo_keyboard_new_device::device_reset()
{
	serial_keyboard_device::device_reset();

	m_keys_down = uint8_t(~0U);
	m_last_reset = 0U;
}

void apollo_keyboard_new_device::rcv_complete()
{
    LOG("%s\n", FUNCNAME);

	receive_register_extract();
	write(get_received_char());
}

void apollo_keyboard_new_device::key_make(uint8_t row, uint8_t column)
{
    LOG("%s: %d %d\n", FUNCNAME, row, column);

	serial_keyboard_device::key_make(row, column);
	m_keys_down = uint8_t((row << 4) | column);
	m_last_reset = 0U;
}

void apollo_keyboard_new_device::key_break(uint8_t row, uint8_t column)
{
    LOG("%s: %d %d\n", FUNCNAME, row, column);

	serial_keyboard_device::key_break(row, column);

	if (m_keys_down == uint8_t((row << 4) | column))
	{
		m_keys_down = uint8_t(~0U);

        //uint8_t code = translate(row, column);
        //send_key(code |= 0x80);
	}
}

#define NOP 0
#define No  0
#define Yes 1

apollo_keyboard_new_device::code_entry const apollo_keyboard_new_device::s_code_table[] = {
		/* Key   | Keycap      | Down | Up  |Unshifted|Shifted|Control|Caps Lock|Up Trans|Auto  */
		/* Number| Legend      | Code | Code|Code     | Code  | Code  |Code     | Code   |Repeat*/

		/* B14     ~ ' / ESC   */ { 0x24, 0xA4, 0x60,     0x7E,   0x1E,   0x60,     NOP,     No  },
		/* B1      ESC         */ { 0x17, 0x97, 0x1B,     0x1B,   NOP,    0x1B,     NOP,     No  },
		/* B2      ! 1         */ { 0x18, 0x98, 0x31,     0x21,   NOP,    0x31,     NOP,     No  },
		/* B3      @ 2         */ { 0x19, 0x99, 0x32,     0x40,   NOP,    0x32,     NOP,     No  },
		/* B4      # 3         */ { 0x1A, 0x9A, 0x33,     0x23,   NOP,    0x33,     NOP,     No  },
		/* B5      $ 4         */ { 0x1B, 0x9B, 0x34,     0x24,   NOP,    0x34,     NOP,     No  },
		/* B6      % 5         */ { 0x1C, 0x9C, 0x35,     0x25,   NOP,    0x35,     NOP,     No  },
		/* B7      ^ 6         */ { 0x1D, 0x9D, 0x36,     0x5E,   NOP,    0x36,     NOP,     No  },
		/* B8      & 7         */ { 0x1E, 0x9E, 0x37,     0x26,   NOP,    0x37,     NOP,     No  },
		/* B9      * 8         */ { 0x1F, 0x9F, 0x38,     0x2A,   NOP,    0x38,     NOP,     No  },
		/* B10     ( 9         */ { 0x20, 0xA0, 0x39,     0x28,   NOP,    0x39,     NOP,     No  },
		/* B11     ) 0         */ { 0x21, 0xA1, 0x30,     0x29,   NOP,    0x30,     NOP,     No  },
		/* B12     _ -         */ { 0x22, 0xA2, 0x2D,     0x5F,   NOP,    0x2D,     NOP,     Yes },
		/* B13     + =         */ { 0x23, 0xA3, 0x3D,     0x2B,   NOP,    0x3D,     NOP,     Yes },
		/* D14     \\ |        */ { 0x53, 0xD3, 0xC8,     0xC9,   NOP,    0xC8,     NOP,     No  },
		/* B15     BACKSPACE   */ { 0x25, 0xA5, 0xDE,     0xDE,   NOP,    0xDE,     NOP,     Yes },

		/* C1      TAB         */ { 0x2C, 0xAC, 0xCA,     0xDA,   0xFA,   0xCA,     NOP,     No  },
		/* C2      Q           */ { 0x2D, 0xAD, 0x71,     0x51,   0x11,   0x51,     NOP,     No  },
		/* C3      W           */ { 0x2E, 0xAE, 0x77,     0x57,   0x17,   0x57,     NOP,     No  },
		/* C4      E           */ { 0x2F, 0xAF, 0x65,     0x45,   0x05,   0x45,     NOP,     No  },
		/* C5      R           */ { 0x30, 0xB0, 0x72,     0x52,   0x12,   0x52,     NOP,     No  },
		/* C6      T           */ { 0x31, 0xB1, 0x74,     0x54,   0x14,   0x54,     NOP,     No  },
		/* C7      V           */ { 0x32, 0xB2, 0x79,     0x59,   0x19,   0x59,     NOP,     No  },
		/* C8      U           */ { 0x33, 0xB3, 0x75,     0x55,   0x15,   0x55,     NOP,     No  },
		/* C9      I           */ { 0x34, 0xB4, 0x69,     0x49,   0x09,   0x49,     NOP,     No  },
		/* C10     O           */ { 0x35, 0xB5, 0x6F,     0x4F,   0x0F,   0x4F,     NOP,     No  },
		/* C11     P           */ { 0x36, 0xB6, 0x70,     0x50,   0x10,   0x50,     NOP,     No  },
		/* C12     { [ / Ue    */ { 0x37, 0xB7, 0x7B,     0x5B,   0x1B,   0x7B,     NOP,     No  },
		/* C13     } ] / Oe    */ { 0x38, 0xB8, 0x7D,     0x5D,   0x1D,   0x7D,     NOP,     No  },
		/* D13     RETURN      */ { 0x52, 0xD2, 0xCB,     0xDB,   NOP,    0xCB,     NOP,     No  },

		/* D2      A           */ { 0x46, 0xC6, 0x61,     0x41,   0x01,   0x41,     NOP,     No  },
		/* D3      S           */ { 0x47, 0xC7, 0x73,     0x53,   0x13,   0x53,     NOP,     No  },
		/* D4      D           */ { 0x48, 0xC8, 0x64,     0x44,   0x04,   0x44,     NOP,     No  },
		/* D5      F           */ { 0x49, 0xC9, 0x66,     0x46,   0x06,   0x46,     NOP,     No  },
		/* D6      G           */ { 0x4A, 0xCA, 0x67,     0x47,   0x07,   0x47,     NOP,     No  },
		/* D7      H           */ { 0x4B, 0xCB, 0x68,     0x48,   0x08,   0x48,     NOP,     No  },
		/* D8      J           */ { 0x4C, 0xCC, 0x6A,     0x4A,   0x0A,   0x4A,     NOP,     No  },
		/* D9      K           */ { 0x4D, 0xCD, 0x6B,     0x4B,   0x0B,   0x4B,     NOP,     No  },
		/* D10     L           */ { 0x4E, 0xCE, 0x6C,     0x4C,   0x0C,   0x4C,     NOP,     No  },
		/* D11     : ; / Oe    */ { 0x4F, 0xCF, 0x3B,     0x3A,   0xFB,   0x3B,     NOP,     No  },
		/* D12     " ' / Ae    */ { 0x50, 0xD0, 0x27,     0x22,   0xF8,   0x27,     NOP,     No  },
// Apollo US keyboards have no hash key (#)
		/* D14     ' #         */ { NOP,  NOP,  0x23,     0x27,   NOP,    0x23,     NOP,     No  },

		/* E2      Z           */ { 0x60, 0xE0, 0x7A,     0x5A,   0x1A,   0x5A,     NOP,     No  },
		/* E3      X           */ { 0x61, 0xE1, 0x78,     0x58,   0x18,   0x58,     NOP,     No  },
		/* E4      C           */ { 0x62, 0xE2, 0x63,     0x43,   0x03,   0x43,     NOP,     No  },
		/* E5      V           */ { 0x63, 0xE3, 0x76,     0x56,   0x16,   0x56,     NOP,     No  },
		/* E6      B           */ { 0x64, 0xE4, 0x62,     0x42,   0x02,   0x42,     NOP,     No  },
		/* E7      N           */ { 0x65, 0xE5, 0x6E,     0x4E,   0x0E,   0x4E,     NOP,     No  },
		/* E8      M           */ { 0x66, 0xE6, 0x6D,     0x4D,   0x0D,   0x4D,     NOP,     No  },
		/* E9      < ,         */ { 0x67, 0xE7, 0x2C,     0x3C,   NOP,    0x2C,     NOP,     No  },
		/* E10     > .         */ { 0x68, 0xE8, 0x2E,     0x3E,   NOP,    0x2E,     NOP,     Yes },
		/* E11     ? /         */ { 0x69, 0xE9, 0xCC,     0xDC,   0xFC,   0xCC,     NOP,     No  },

		/*         _           */ { NOP,  NOP,  NOP,      NOP,    NOP,    NOP,      NOP,     NOP },
		/* F1      (space bar) */ { 0x76, 0xF6, 0x20,     0x20,   0x20,   0x20,     NOP,     Yes },
		/* LC0     Home        */ { 0x27, 0xA7, 0x84,     0x94,   0x84,   0x84,     0xA4,    No  },
#if !MAP_APOLLO_KEYS
		/* C14     DELETE      */ { 0x3A, 0xBA, 0x7F,     0x7F,   NOP,    0x7F,     NOP,     Yes },
#else
		/* E13     POP         */ { 0x6C, 0xEC, 0x80,     0x90,   0x80,   0x80,     0xA0,    No  },
#endif
		/* LF0     Roll Up     */ { 0x72, 0xF2, 0x8D,     0x9D,   0x8D,   0x8D,     0xAD,    No  },
		/* LF2     Roll Down   */ { 0x74, 0xF4, 0x8F,     0x9F,   0x8F,   0x8F,     0xAF,    No  },
		/* LC2     End         */ { 0x29, 0xA9, 0x86,     0x96,   0x86,   0x86,     0xA6,    No  },
		/* LE0     Cursor left */ { 0x59, 0xD9, 0x8A,     0x9A,   0x9A,   0x9A,     0xAA,    Yes },
		/* LD1     Cursor Up   */ { 0x41, 0xC1, 0x88,     0x98,   0x88,   0x88,     0xA8,    Yes },
		/* LE2     Cursor right*/ { 0x5B, 0xDB, 0x8C,     0x9C,   0x8C,   0xBE,     0xAC,    Yes },
		/* LF1     Cursor down */ { 0x73, 0xF3, 0x8E,     0x9E,   0x8E,   0x8E,     0xAE,    Yes },

#if !MAP_APOLLO_KEYS
		/*         Numpad CLR  */ { NOP,  NOP,  NOP,      NOP,    NOP,    NOP,      NOP,     NOP },
		/*         Numpad /    */ { NOP,  NOP,  NOP,      NOP,    NOP,    NOP,      NOP,     NOP },
		/*         Numpad *    */ { NOP,  NOP,  NOP,      NOP,    NOP,    NOP,      NOP,     NOP },
		/* RD4     -           */ { 0x58, 0xD8, 0xFE2D,   0xFE5F, NOP,    0xFE2D,   NOP,     No  },
		/* RC1     7           */ { 0x3C, 0xBC, 0xFE37,   0xFE26, NOP,    0xFE37,   NOP,     No  },
		/* RC2     8           */ { 0x3D, 0xBD, 0xFE38,   0xFE2A, NOP,    0xFE38,   NOP,     No  },
		/* RC3     9           */ { 0x3E, 0xBE, 0xFE39,   0xFE28, NOP,    0xFE39,   NOP,     No  },
		/* RC4     +           */ { 0x3F, 0xBF, 0xFE2B,   0xFE3D, NOP,    0xFE2B,   NOP,     No  },
		/* RD1     4           */ { 0x55, 0xD5, 0xFE34,   0xFE24, NOP,    0xFE34,   NOP,     No  },
		/* RD2     5           */ { 0x56, 0xD6, 0xFE35,   0xFE25, NOP,    0xFE35,   NOP,     No  },
		/* RD3     6           */ { 0x57, 0xD7, 0xFE36,   0xFE5E, NOP,    0xFE36,   NOP,     No  },
		/*         Numpad =    */ { NOP,  NOP,  NOP,      NOP,    NOP,    NOP,      NOP,     NOP },
		/* RE1     1           */ { 0x6E, 0xEE, 0xFE31,   0xFE21, NOP,    0xFE31,   NOP,     No  },
		/* RE2     2           */ { 0x6F, 0xEF, 0xFE32,   0xFE40, NOP,    0xFE32,   NOP,     No  },
		/* RE3     3           */ { 0x70, 0xF0, 0xFE33,   0xFE23, NOP,    0xFE33,   NOP,     No  },
		/* RF3     ENTER       */ { 0x7C, 0xFC, 0xFECB,   0xFEDB, NOP,    0xFECB,   NOP,     No  },
		/* RF1     0           */ { 0x79, 0xF9, 0xFE30,   0xFE29, NOP,    0xFE30,   NOP,     No  },
		/*         Numpad ,    */ { NOP,  NOP,  NOP,      NOP,    NOP,    NOP,      NOP,     NOP },
		/* RF2     .           */ { 0x7B, 0xFB, 0xFE2E,   0xFE2E, NOP,    0xFE2E,   NOP,     No  },
		/* A0      F0          */ { 0x04, 0x84, 0x1C,     0x5C,   0x7C,   0x1C,     0xBC,    No  },
		/* A1      F1          */ { 0x05, 0x85, 0xC0,     0xD0,   0xF0,   0xC0,     0xE0,    No  },
		/* A2      F2          */ { 0x06, 0x86, 0xC1,     0x01,   0xF1,   0xC1,     0xE1,    No  },
		/* A3      F3          */ { 0x07, 0x87, 0xC2,     0x02,   0xF2,   0xC2,     0xE2,    No  },
		/* A4      F4          */ { 0x08, 0x88, 0xC3,     0x03,   0xF3,   0xC3,     0xE3,    No  },
		/* A5      F5          */ { 0x09, 0x89, 0xC4,     0x04,   0xF4,   0xC4,     0xE4,    No  },
		/* A6      F6          */ { 0x0A, 0x8A, 0xC5,     0x05,   0xF5,   0xC5,     0xE5,    No  },
		/* A7      F7          */ { 0x0B, 0x8B, 0xC6,     0x06,   0xF6,   0xC6,     0xE6,    No  },
		/* A8      F8          */ { 0x0C, 0x8C, 0xC7,     0x07,   0xF7,   0xC7,     0xE7,    No  },
		/* A9      F9          */ { 0x0D, 0x8D, 0x1F,     0x2F,   0x3F,   0x1F,     0xBD,    No  },
#else
		/* E13     POP         */ { 0x6C, 0xEC, 0x80,     0x90,   0x80,   0x80,     0xA0,    No  },
		/* LDO     [<-]        */ { 0x40, 0xC0, 0x87,     0x97,   0x87,   0x87,     0xA7,    No  },
		/* LD2     [->]        */ { 0x42, 0xC2, 0x89,     0x99,   0x89,   0x89,     0xA9,    No  },
		/* RD4     Numpad -    */ { 0x58, 0xD8, 0xFE2D,   0xFE5F, NOP,    0xFE2D,   NOP,     No  },
		/* LC0   7 Home        */ { 0x27, 0xA7, 0x84,     0x94,   0x84,   0x84,     0xA4,    No  },
		/* LD1   8 Cursor Up   */ { 0x41, 0xC1, 0x88,     0x98,   0x88,   0x88,     0xA8,    Yes },
		/* LF0   9 Roll Up     */ { 0x72, 0xF2, 0x8D,     0x9D,   0x8D,   0x8D,     0xAD,    No  },
		/* RC4     Numpad +    */ { 0x3F, 0xBF, 0xFE2B,   0xFE3D, NOP,    0xFE2B,   NOP,     No  },
		/* LE0   4 Cursor left */ { 0x59, 0xD9, 0x8A,     0x9A,   0x9A,   0x9A,     0xAA,    Yes },
		/* LE1     NEXT WINDOW */ { 0x5A, 0xDA, 0x8B,     0x9B,   0x8B,   0x8B,     0xAB,    No  },
		/* LE2   6 Cursor right*/ { 0x5B, 0xDB, 0x8C,     0x9C,   0x8C,   0xBE,     0xAC,    Yes },
		/*         Numpad =    */ { 0x7C, 0xFC, 0xFEC8,   0xFED8, NOP,    0xFECB,   NOP,     No  },
		/* LC2   1 End         */ { 0x29, 0xA9, 0x86,     0x96,   0x86,   0x86,     0xA6,    No  },
		/* LF1   2 Cursor down */ { 0x73, 0xF3, 0x8E,     0x9E,   0x8E,   0x8E,     0xAE,    Yes },
		/* LF2   3 Roll Down   */ { 0x74, 0xF4, 0x8F,     0x9F,   0x8F,   0x8F,     0xAF,    No  },
		/* RF3     ENTER       */ { 0x7C, 0xFC, 0xFECB,   0xFEDB, NOP,    0xFECB,   NOP,     No  },
		/* LE1     NEXT WINDOW */ { 0x5A, 0xDA, 0x8B,     0x9B,   0x8B,   0x8B,     0xAB,    No  },
		/*         Numpad ,    */ { NOP,  NOP,  NOP,      NOP,    NOP,    NOP,      NOP,     NOP },
		/* E13     POP         */ { 0x6C, 0xEC, 0x80,     0x90,   0x80,   0x80,     0xA0,    No  },

		/* LC1  F1/SHELL/CMD   */ { 0x28, 0xA8, 0x85,     0x95,   0x85,   0x85,     0xA5,    No  },
		/* LB0  F2/CUT/COPY    */ { 0x13, 0x93, 0xB0,     0xB4,   0xB0,   0xB0,     0xB8,    No  },
		/* LB1  F3/UNDO/PASTE  */ { 0x14, 0x94, 0xB1,     0xB5,   0xB1,   0xB1,     0xB9,    No  },
		/* LB2  F4/MOVE/GROW   */ { 0x15, 0x95, 0xB2,     0xB6,   0xB2,   0xB2,     0xBA,    No  },

		/* LAO  F5/INS/MARK    */ { 0x01, 0x81, 0x81,     0x91,   0x81,   0x81,     0xA1,    No  },
		/* LA1  F6/LINE DEL    */ { 0x02, 0x82, 0x82,     0x92,   0x82,   0x82,     0xA2,    No  },
		/* LA2  F7/CHAR DEL    */ { 0x03, 0x83, 0x83,     0x93,   0x83,   0x83,     0xA3,    Yes },
		/* RA0  F8/AGAIN       */ { 0x0E, 0x8E, 0xCD,     0xE9,   0xCD,   0xCD,     0xED,    No  },

		/* RA1  F9/READ        */ { 0x0F, 0x8F, 0xCE,     0xEA,   0xCE,   0xCE,     0xEE,    No  },
		/* RA2 F10/SAVE/EDIT   */ { 0x10, 0x90, 0xCF,     0xEB,   0xCF,   0xCF,     0xEF,    No  },
#endif
		/* RA3 F11/ABORT/EXIT  */ { 0x11, 0x91, 0xDD,     0xEC,   0xD0,   0xD0,     0xFD,    No  },
		/* RA4 F12/HELP/HOLD   */ { 0x12, 0x92, 0xB3,     0xB7,   0xB3,   0xB3,     0xBB,    No  },

		/* LE1     NEXT WINDOW */ { 0x5A, 0xDA, 0x8B,     0x9B,   0x8B,   0x8B,     0xAB,    No  },
		/* LE1     NEXT WINDOW */ { 0x5A, 0xDA, 0x8B,     0x9B,   0x8B,   0x8B,     0xAB,    No  },

		/* D1      CAPS LOCK   */ { NOP,  NOP,  NOP,      NOP,    NOP,    NOP,      NOP,     NOP },
		/* E1      SHIFT       */ { 0x5E, 0xDE, NOP,      NOP,    NOP,    NOP,      NOP,     NOP },
		/* DO      CTRL        */ { 0x43, 0xC3, NOP,      NOP,    NOP,    NOP,      NOP,     NOP },
// FIXME: ALT swapped!
		/* ??      ALT_R       */ { 0x77, 0xF7, 0xfe00,   NOP,    NOP,    NOP,      0xfe01,  No  },
		/* ??      ALT_L       */ { 0x75, 0xF5, 0xfe02,   NOP,    NOP,    NOP,      0xfe03,  No  },
		/* E12     SHIFT       */ { 0x6A, 0xEA, NOP,      NOP,    NOP,    NOP,      NOP,     NOP },
// not yet used:
		/* E0      REPEAT      */ { 0x5D, 0xDD, NOP,      NOP,    NOP,    NOP,      NOP,     NOP },
		/*        CAPS LOCK LED*/ { 0x7E, 0xFE, NOP,      NOP,    NOP,    NOP,      NOP,     NOP },
// german kbd:
		/* 0x68 B1_DE   _      */ { 0x17, 0x97, 0x60,     0x7E,   0x1E,   0x60,     NOP,     No  },
		/* 0x69 E1a_DE  <>     */ { 0x5F, 0xDF, 0xBE,     0xBE,   NOP,    0xBE,     NOP,     No  },
		/* 0x6a B14_DE  ESC    */ { 0x16, 0x96, 0x1B,     0x1B,   NOP,    0x1B,     NOP,     No  },
		/* 0x6b D14_DE  # \    */ { 0x51, 0xD1, 0xC8,     0xC9,   NOP,    0xC8,     NOP,     No  },

		/* 0x6c NPG     NP (   */ { 0x3F, 0xBF, 0xFE28,   0xFE0E, NOP,    0xFE28,   NOP,     No  },
		/* 0x6d NPF     NP )   */ { 0x58, 0xD8, 0xFE29,   0xFE0F, NOP,    0xFE29,   NOP,     No  },
		/* 0x6e NPD     NP +   */ { 0x3B, 0xBB, 0xFE2B,   0xFE26, NOP,    0xFE2B,   NOP,     No  },
		/* 0x6f NPC     NP -   */ { 0x54, 0xD4, 0xFE2D,   0xFE7E, NOP,    0xFE2D,   NOP,     No  },
		/* 0x70 NPB     NP *   */ { 0x6D, 0xED, 0xFE2A,   0xFE21, NOP,    0xFE2A,   NOP,     No  },
		/* 0x71 NPA     NP /   */ { 0x78, 0xF8, 0xFECC,   0xFEC8, NOP,    0xFECC,   NOP,     No  },
		/* 0x72 NPP     NP .   */ { 0x7B, 0xFB, 0xFE2E,   0xFE2C, NOP,    0xFE2E,   NOP,     No  },
		/* 0x73 NPE     ENTER  */ { 0x7C, 0xFC, 0xFECB,   0xFE3D, NOP,    0xFECB,   NOP,     No  },

		/* 0x74 A0      F0     */ { 0x04, 0x84, 0x1C,     0x5C,   0x7C,   0x1C,     0xBC,    No  },
		/* 0x75 A1      F1     */ { 0x05, 0x85, 0xC0,     0xD0,   0xF0,   0xC0,     0xE0,    No  },
		/* 0x76 A2      F2     */ { 0x06, 0x86, 0xC1,     0x01,   0xF1,   0xC1,     0xE1,    No  },
		/* 0x77 A3      F3     */ { 0x07, 0x87, 0xC2,     0x02,   0xF2,   0xC2,     0xE2,    No  },
		/* 0x78 A4      F4     */ { 0x08, 0x88, 0xC3,     0x03,   0xF3,   0xC3,     0xE3,    No  },
		/* 0x79 A5      F5     */ { 0x09, 0x89, 0xC4,     0x04,   0xF4,   0xC4,     0xE4,    No  },
		/* 0x7a A6      F6     */ { 0x0A, 0x8A, 0xC5,     0x05,   0xF5,   0xC5,     0xE5,    No  },
		/* 0x7b A7      F7     */ { 0x0B, 0x8B, 0xC6,     0x06,   0xF6,   0xC6,     0xE6,    No  },
		/* 0x7c A8      F8     */ { 0x0C, 0x8C, 0xC7,     0x07,   0xF7,   0xC7,     0xE7,    No  },
		/* 0x7d A9      F9     */ { 0x0D, 0x8D, 0x1F,     0x2F,   0x3F,   0x1F,     0xBD,    No  },

		/* Key   | Keycap      | Down | Up  |Unshifted|Shifted|Control|Caps Lock|Up Trans|Auto  */
		/* Number| Legend      | Code | Code|Code     | Code  | Code  |Code     | Code   |Repeat*/
};


DEFINE_DEVICE_TYPE(APOLLO_KEYBOARD_NEW, apollo_keyboard_new_device, "apollo_kb_new", "Apollo Keyboard")
